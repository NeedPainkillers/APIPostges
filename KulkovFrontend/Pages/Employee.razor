@page "/empl"

@using Kulkov.Data
@using Kulkov.Repository
@using System
@using System.Linq
@using System.Collections.Generic
@inject IEmployeeRepository Service
@inject IPostRepository PostGetter

<h1>Сотрудники</h1>

<label for="inp" class="inp">
    <input type="text" @bind-value="employee.last_name" @bind-value:event="oninput" />
    <span class="label">Фамилия</span>
    <span class="border"></span>
</label>
<label for="inp" class="inp">
    <input type="text" @bind-value="employee.first_name" @bind-value:event="oninput" />
    <span class="label">Имя</span>
    <span class="border"></span>
</label>
<label for="inp" class="inp">
    <input type="text" @bind-value="employee.patronymic" @bind-value:event="oninput" />
    <span class="label">Отчество</span>
    <span class="border"></span>
</label>
<label for="inp" class="inp">
    <input type="datetime" @bind-value="employee.hire_date" @bind-value:event="onchange" />
    <span class="label">Дата найма</span>
    <span class="border"></span>
</label>
@*<label for="inp" class="inp">
        <input type="text" @bind-value="employee.id_post" @bind-value:event="onchange" />
        <span class="label">id должности</span>
        <span class="border"></span>
    </label>*@
    <br />
<select class="form-control" @bind="@employee.id_post">

    <option value="-1">Должность</option>
    @if (posts != null)
    {
        @foreach (var post in posts)
        {
            <option value="@post.id_post"> @post.post_name</option>
        }
    }
</select>
<label for="inp" class="">
    <span class="inp label">Пол</span>
    <input type="checkbox" @bind="employee.gender" @bind:event="oninput" />
</label>

<input type="button" value="Добавить" @onclick="Add" />

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>id</th>
                <th>Фамилия</th>
                <th>Имя</th>
                <th>Отчество</th>
                <th>Пол</th>
                <th>Дата найма</th>
                <th>Должность</th>
                <th>Удалить</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < employees.Count; i++)
            {
                var l = i; //local index
                <tr>
                    <td>@employees[i].id_emp</td>
                    <td><input type="text" @bind-value="employees[l].last_name" @bind-value:event="oninput" @onchange="() => { Update(l).Wait(); }" /></td>
                    <td><input type="text" @bind-value="employees[l].first_name" @bind-value:event="oninput" @onchange="() => { Update(l).Wait(); }" /></td>
                    <td><input type="text" @bind-value="employees[l].patronymic" @bind-value:event="oninput" @onchange="() => { Update(l).Wait(); }" /></td>
                    <td><input type="checkbox" @bind="employees[l].gender" @bind:event="oninput" @onchange="() => { Update(l).Wait(); }" /></td>
                    <td><input type="datetime" @bind-value="employees[l].hire_date" @bind-value:event="oninput" @onchange="() => { Update(l).Wait(); }" /></td>
                    @*<td><input type="text" @bind-value="employees[l].id_post" @bind-value:event="oninput" @onchange="() => { Update(l).Wait(); }" /></td>*@
                    <td>
                        <select class="" @bind="@employees[l].id_post" @bind:event="oninput" @onchange="() => { Update(l).Wait(); }">
                            @if (posts != null)
                            {
                                @foreach (var post in posts)
                                {
                                    <option value="@post.id_post"> @post.post_name</option>
                                }
                            }
                        </select>
                    </td>
                    <td><input type="checkbox" @bind="vs[l]" @bind:event="oninput" /></td>
                </tr>
            }
        </tbody>
    </table>
    <input type="button" value="Удалить записи" @onclick="Delete" />
}

@code {
    public List<Kulkov.Data.Employee> employees;

    public Kulkov.Data.Employee employee = new Kulkov.Data.Employee();

    public bool[] vs;

    private List<Kulkov.Data.Post> posts;

    protected async Task Add()
    {
        await Service.AddEmployee(employee);
        employee = new Kulkov.Data.Employee();
        await UpdateTable();
    }

    protected async Task Update()
    {
        var response = await Service.GetAllEmployees();
        var updateItems = (from item in employees.AsParallel()
                           join dbemp in response.AsParallel() on item.id_emp equals dbemp.id_emp
                           where !(item.id_post.Equals(dbemp.id_post) && item.last_name.Equals(dbemp.last_name) &&
                           item.first_name.Equals(dbemp.first_name) && item.gender.Equals(dbemp.gender) &&
                           item.patronymic.Equals(dbemp.patronymic) && item.hire_date.Equals(dbemp.hire_date))
                           select item).ToList();
        foreach (var item in updateItems)
        {
            await Service.UpdateEmployee(item.id_emp, item);
        }
        //await UpdateTable();
    }
    protected async Task Update(int row)
    {
        await Service.UpdateEmployee(employees[row].id_emp, employees[row]);
        //await UpdateTable();
    }

    protected async Task Delete()
    {
        for (int i = 0; i < vs.Length; i++)
        {
            if (vs[i])
                await Service.RemoveEmployee(employees[i].id_emp);
        }
        await UpdateTable();
    }

    protected async Task UpdateTable()
    {
        var response = await Service.GetAllEmployees();
        employees = response.ToList();
        vs = null;
        vs = new bool[employees.Count];
        response = null;
    }

    protected async override Task OnInitializedAsync()
    {
        var response = await Service.GetAllEmployees();
        employees = response.ToList();
        vs = new bool[employees.Count];
        response = null;
        posts = (await PostGetter.GetAllPosts()).ToList();
    }
}

